// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// So user is created with an emai
// He would be sent an email from that he would be navigated to create password page
// This would generate the auth for the user
// After that the user will be able to login

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  userEvents    UserEvent[]
  timeSlotVotes TimeSlotVote[]
}

// Event -> TimeSlots -> Votes
model Event {
  id          Int         @id @default(autoincrement())
  agenda      String
  description String
  createTime  DateTime    @default(now())
  updateTime  DateTime    @updatedAt
  timeSlots   TimeSlot[]
  particpants UserEvent[]
}

model TimeSlot {
  id           Int            @id @default(autoincrement())
  startTime    DateTime
  endTime      DateTime
  eventId      Int
  event        Event          @relation(fields: [eventId], references: [id])
  timeSlotVote TimeSlotVote[]
}

model TimeSlotVote {
  id       Int      @id @default(autoincrement())
  userId   Int
  slotId   Int
  user     User     @relation(references: [id], fields: [userId])
  timeSlot TimeSlot @relation(references: [id], fields: [slotId])

  @@unique([userId, slotId])
}

enum AcceptedRejected {
  REJECTED
  ACCEPTED
  UNKNOWN
}

model UserEvent {
  id         Int              @id @default(autoincrement())
  userId     Int
  eventId    Int
  status     AcceptedRejected
  createTime DateTime         @default(now())
  updateTime DateTime         @updatedAt
  user       User             @relation(fields: [userId], references: [id])
  event      Event            @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}
